// Prisma schema for Aram Tutorials
// This file defines the database models based on the technical architecture

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  content       String
  excerpt       String?
  featuredImage String?  @map("featured_image")
  youtubeUrl    String?  @map("youtube_url")
  readingTime   Int      @default(5) @map("reading_time")
  published     Boolean  @default(false)
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?  @map("category_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  tags          PostTag[]
  comments      Comment[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  icon        String?
  color       String?    @default("#1e293b")
  createdAt   DateTime   @default(now()) @map("created_at")
  posts       BlogPost[]
}

model Tag {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  createdAt DateTime   @default(now()) @map("created_at")
  posts     PostTag[]
}

model PostTag {
  post   BlogPost @relation(fields: [postId], references: [id])
  postId String
  tag    Tag      @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([postId, tagId])
}

model NewsletterSubscription {
  id           String   @id @default(uuid())
  email        String   @unique
  active       Boolean  @default(true)
  subscribedAt DateTime @default(now()) @map("subscribed_at")
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @unique
}

model ContactSubmission {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now()) @map("created_at")
}

model Comment {
  id        String   @id @default(uuid())
  post      BlogPost @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
}

model User {
  id        String   @id @default(uuid())
  email     String
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  comments  Comment[]
  newsletter NewsletterSubscription?
}
